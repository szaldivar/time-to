{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DATE_TIME","Date","getTime","DATE_TIME_SINCE","App","useState","timeto","Math","floor","seconds","setSeconds","seconds2","setSeconds2","interval1Ref","useRef","useEffect","current","setInterval","className","toLocaleString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAGMA,EAAY,IAAIC,KAAK,4BAA4BC,UACjDC,EAAkB,IAAIF,KAAK,4BAA4BC,UAkC9CE,MAhCf,WAAgB,IAAD,EACiBC,oBAAS,WACrC,IAAIC,EAASN,GAAY,IAAIC,MAAOC,UACpC,OAAOK,KAAKC,MAAMF,EAAS,QAHhB,mBACNG,EADM,KACGC,EADH,OAKmBL,mBAC9BE,KAAKC,QAAO,IAAIP,MAAOC,UAAYC,GAAmB,MAN3C,mBAKNQ,EALM,KAKIC,EALJ,KASPC,EAAeC,iBAAO,MAS5B,OAPAC,qBAAU,WACRF,EAAaG,QAAUC,aAAY,WACjCP,EAAWH,KAAKC,OAAOR,GAAY,IAAIC,MAAOC,WAAa,MAC3DU,EAAYL,KAAKC,QAAO,IAAIP,MAAOC,UAAYC,GAAmB,QACjE,OACF,IAGD,qBAAKe,UAAU,MAAf,SACE,sBAAKA,UAAU,aAAf,UACGT,EAAU,EACT,wCACUA,EAAQU,eAAe,SADjC,wCAGE,KACJ,0CAAaR,EAASQ,eAAe,SAArC,yCCpBOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2f3d6f3e.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nconst DATE_TIME = new Date(\"2022-01-22T15:10:00.000Z\").getTime();\nconst DATE_TIME_SINCE = new Date(\"2021-12-12T16:05:00.000Z\").getTime();\n\nfunction App() {\n  const [seconds, setSeconds] = useState(() => {\n    let timeto = DATE_TIME - new Date().getTime();\n    return Math.floor(timeto / 1000);\n  });\n  const [seconds2, setSeconds2] = useState(\n    Math.floor((new Date().getTime() - DATE_TIME_SINCE) / 1000)\n  );\n\n  const interval1Ref = useRef(null);\n\n  useEffect(() => {\n    interval1Ref.current = setInterval(() => {\n      setSeconds(Math.floor((DATE_TIME - new Date().getTime()) / 1000));\n      setSeconds2(Math.floor((new Date().getTime() - DATE_TIME_SINCE) / 1000));\n    }, 1000);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        {seconds > 0 ? (\n          <p>\n            Faltan {seconds.toLocaleString(\"es-MX\")} segundos para vernos üôà\n          </p>\n        ) : null}\n        <p>Llevamos {seconds2.toLocaleString(\"es-MX\")} segundos juntos ‚ù§Ô∏è</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
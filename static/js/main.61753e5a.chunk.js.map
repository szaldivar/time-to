{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DATE_TIME_LAST_SAW","Date","getTime","DATE_TIME_WILL_SEE","DATE_TIME_SINCE","TOTAL_BETWEEN","App","useState","timeto","Math","floor","seconds","setSeconds","seconds2","setSeconds2","timeNow","toFixed","progress","setProgress","interval1Ref","useRef","useEffect","current","setInterval","className","toLocaleString","style","position","inset","transform","backgroundColor","zIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAGMA,EAAqB,IAAIC,KAAK,4BAA4BC,UAC1DC,EAAqB,IAAIF,KAAK,4BAA4BC,UAC1DE,EAAkB,IAAIH,KAAK,4BAA4BC,UACvDG,EAAgBF,EAAqBH,EAuD5BM,MArDf,WAAgB,IAAD,EACiBC,oBAAS,WACrC,IAAIC,EAASL,GAAqB,IAAIF,MAAOC,UAC7C,OAAOO,KAAKC,MAAMF,EAAS,QAHhB,mBACNG,EADM,KACGC,EADH,OAKmBL,oBAAS,kBACvCE,KAAKC,QAAO,IAAIT,MAAOC,UAAYE,GAAmB,QAN3C,mBAKNS,EALM,KAKIC,EALJ,OAQmBP,oBAAS,WACvC,IAAIQ,GAAU,IAAId,MAAOC,UACzB,OAAIa,GAAWZ,EAA2B,QAChCY,EAAUf,GAAsBK,EAAiB,KAAKW,QAAQ,MAX7D,mBAQNC,EARM,KAQIC,EARJ,KAcPC,EAAeC,iBAAO,MAe5B,OAbAC,qBAAU,WACRF,EAAaG,QAAUC,aAAY,WACjC,IAAIR,GAAU,IAAId,MAAOC,UACzBU,EAAWH,KAAKC,OAAOP,EAAqBY,GAAW,MACvDD,EAAYL,KAAKC,OAAOK,EAAUX,GAAmB,MAClBc,EAA/BH,GAAWZ,EAAgC,QAGxCY,EAAUf,GAAsBK,EAAiB,KAAKW,QAAQ,MAEpE,OACF,IAGD,sBAAKQ,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACGb,EAAU,EACT,wCACUA,EAAQc,eAAe,SADjC,wCAGE,KACHd,EAAU,EAAI,0CAAaM,EAAb,oBAA2C,KAC1D,0CAAaJ,EAASY,eAAe,SAArC,sCAEF,qBACEC,MAAO,CACLC,SAAU,QACVC,MAAO,EACPC,UAAU,aAAD,OAAeZ,EAAf,MACTa,gBAAiB,qBACjBC,QAAS,UC1CJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.61753e5a.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nconst DATE_TIME_LAST_SAW = new Date(\"2022-01-09T00:45:00.000Z\").getTime();\nconst DATE_TIME_WILL_SEE = new Date(\"2022-01-22T15:10:00.000Z\").getTime();\nconst DATE_TIME_SINCE = new Date(\"2021-12-12T16:05:00.000Z\").getTime();\nconst TOTAL_BETWEEN = DATE_TIME_WILL_SEE - DATE_TIME_LAST_SAW;\n\nfunction App() {\n  const [seconds, setSeconds] = useState(() => {\n    let timeto = DATE_TIME_WILL_SEE - new Date().getTime();\n    return Math.floor(timeto / 1000);\n  });\n  const [seconds2, setSeconds2] = useState(() =>\n    Math.floor((new Date().getTime() - DATE_TIME_SINCE) / 1000)\n  );\n  const [progress, setProgress] = useState(() => {\n    let timeNow = new Date().getTime();\n    if (timeNow >= DATE_TIME_WILL_SEE) return \"100\";\n    return (((timeNow - DATE_TIME_LAST_SAW) / TOTAL_BETWEEN) * 100).toFixed(2);\n  });\n\n  const interval1Ref = useRef(null);\n\n  useEffect(() => {\n    interval1Ref.current = setInterval(() => {\n      let timeNow = new Date().getTime();\n      setSeconds(Math.floor((DATE_TIME_WILL_SEE - timeNow) / 1000));\n      setSeconds2(Math.floor((timeNow - DATE_TIME_SINCE) / 1000));\n      if (timeNow >= DATE_TIME_WILL_SEE) setProgress(\"100\");\n      else\n        setProgress(\n          (((timeNow - DATE_TIME_LAST_SAW) / TOTAL_BETWEEN) * 100).toFixed(2)\n        );\n    }, 1000);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        {seconds > 0 ? (\n          <p>\n            Faltan {seconds.toLocaleString(\"es-MX\")} segundos para vernos üôà\n          </p>\n        ) : null}\n        {seconds > 0 ? <p>Llevamos {progress}% de la espera</p> : null}\n        <p>Llevamos {seconds2.toLocaleString(\"es-MX\")} segundos juntos ‚ù§Ô∏è</p>\n      </div>\n      <div\n        style={{\n          position: \"fixed\",\n          inset: 0,\n          transform: `translate(${progress}%)`,\n          backgroundColor: \"hsl(220, 13%, 21%)\",\n          zIndex: -10,\n        }}\n      ></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
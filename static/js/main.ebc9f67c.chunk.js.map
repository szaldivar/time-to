{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DATE_TIME_LAST_SAW","Date","getTime","DATE_TIME_WILL_SEE","DATE_TIME_SINCE","TOTAL_BETWEEN","getStr","numeric","base","arr","push","substring","length","fromSecondsToHtime","seconds","days","Math","floor","hours","minutes","last","splice","join","App","useState","timeto","setSeconds","secondsAux","htimeTo","setHtimeTo","seconds2","setSeconds2","timeNow","toFixed","progress","setProgress","interval1Ref","useRef","useEffect","current","setInterval","htime","className","style","padding","toLocaleString","position","inset","transform","backgroundColor","zIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebc9f67c.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nconst DATE_TIME_LAST_SAW = new Date(\"2022-07-24T12:15:00.000Z\").getTime();\nconst DATE_TIME_WILL_SEE = new Date(\"2022-11-26T01:20:00.000Z\").getTime();\nconst DATE_TIME_SINCE = new Date(\"2021-12-12T16:05:00.000Z\").getTime();\nconst TOTAL_BETWEEN = DATE_TIME_WILL_SEE - DATE_TIME_LAST_SAW;\n\nconst getStr = (numeric, base, arr) => {\n  if (numeric === 1) {\n    arr.push(`${numeric} ${base.substring(0, base.length - 1)}`);\n  } else if (numeric > 0) {\n    arr.push(`${numeric} ${base}`);\n  }\n};\n\nconst fromSecondsToHtime = (seconds) => {\n  let base = 60 * 60 * 24;\n  let days = Math.floor(seconds / base);\n  seconds %= base;\n  base /= 24;\n  let hours = Math.floor(seconds / base);\n  seconds %= base;\n  base /= 60;\n  let minutes = Math.floor(seconds / base);\n  seconds %= base;\n  let arr = [];\n  getStr(days, \"d√≠as\", arr);\n  getStr(hours, \"horas\", arr);\n  getStr(minutes, \"minutos\", arr);\n  getStr(seconds, \"segundos\", arr);\n  if (arr.length === 1) return arr[0];\n  let last = arr.splice(-1);\n  return `${arr.join(\", \")} y ${last[0]}`;\n};\n\nfunction App() {\n  const [seconds, setSeconds] = useState(() => {\n    let timeto = DATE_TIME_WILL_SEE - new Date().getTime();\n    return Math.floor(timeto / 1000);\n  });\n  const [htimeTo, setHtimeTo] = useState(() => {\n    let secondsAux = Math.floor(\n      (DATE_TIME_WILL_SEE - new Date().getTime()) / 1000\n    );\n    if (secondsAux <= 0) return null;\n    return fromSecondsToHtime(secondsAux);\n  });\n  const [seconds2, setSeconds2] = useState(() =>\n    Math.floor((new Date().getTime() - DATE_TIME_SINCE) / 1000)\n  );\n  const [progress, setProgress] = useState(() => {\n    let timeNow = new Date().getTime();\n    if (timeNow >= DATE_TIME_WILL_SEE) return \"100\";\n    return (((timeNow - DATE_TIME_LAST_SAW) / TOTAL_BETWEEN) * 100).toFixed(2);\n  });\n\n  const interval1Ref = useRef(null);\n\n  useEffect(() => {\n    interval1Ref.current = setInterval(() => {\n      let timeNow = new Date().getTime();\n      let secondsAux = Math.floor((DATE_TIME_WILL_SEE - timeNow) / 1000);\n      setSeconds(secondsAux);\n      let htime = secondsAux > 0 ? fromSecondsToHtime(secondsAux) : null;\n      setHtimeTo(htime);\n      setSeconds2(Math.floor((timeNow - DATE_TIME_SINCE) / 1000));\n      if (timeNow >= DATE_TIME_WILL_SEE) setProgress(\"100\");\n      else\n        setProgress(\n          (((timeNow - DATE_TIME_LAST_SAW) / TOTAL_BETWEEN) * 100).toFixed(2)\n        );\n    }, 1000);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        {seconds > 0 ? (\n          <>\n            <p style={{ padding: \"0 15px\" }}>\n              Faltan {seconds.toLocaleString(\"es-MX\")} segundos para vernos üôà\n            </p>\n            <p style={{ padding: \"0 15px\" }}>Faltan {htimeTo}</p>\n          </>\n        ) : null}\n        {seconds > 0 ? (\n          <p style={{ padding: \"0 15px\" }}>Llevamos {progress}% de la espera</p>\n        ) : null}\n        <p style={{ padding: \"0 15px\" }}>\n          Llevamos {seconds2.toLocaleString(\"es-MX\")} segundos juntos ‚ù§Ô∏è\n        </p>\n      </div>\n      <div\n        style={{\n          position: \"fixed\",\n          inset: 0,\n          transform: `translate(${progress}%)`,\n          backgroundColor: \"hsl(220, 13%, 21%)\",\n          zIndex: -10,\n        }}\n      ></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}